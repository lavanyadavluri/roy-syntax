{ "name": "Roy Program",
  "scopeName": "source.roy",
  "fileTypes": ["roy"],
  "patterns": [
    {  "name": "keyword.control.roy",
       "match": "(?i:\\b(if|while|until|for|do|end|then|else|run|quit|cancel)\\b)"
    },
    {  "name": "keyword.other.roy",
       "match": "(?i:\\b((data|set|merge)\\s+(\\w+))\\b)",
       "captures": {
           "2": { "name": "support.function.roy" },
           "3": {"name": "entity.name.function.roy"}
       }
    },
    { "begin": "(?i:\\bproc\\s*sql\\s*;)",
      "end": "(?i:\\bquit\\s*;)",
      "name": "sql.block.roy",
      "patterns": [
        {
          "name": "comment.line.roy",
          "match": "\\*.*;"
        },
        {  "name": "comment.block.roy",
           "begin": "(?<!select |SELECT )\\*",
           "end": ";",
           "comment": "This is a kludge, to keep the SQL construct 'select *' from processing as a comment.  I could not figure out how to make the negative lookbehind case-insensitive."
        },
          {
          "include": "source.sql"
        }
      ],
      "comment": "Looks like for this to work there must be a *name* as well as the patterns/include bit."
    },
    {  "name": "keyword.operator.roy",
       "match": "\\b([+\\-*^/=])\\b"
    },
    {  "name": "keyword.datastep.roy",
       "match": "(?i:\\b(by|label|format)\\b)"
    },
    {  "name": "meta.function-call.roy",
       "match": "(?i:\\b(proc (\\w+))\\b)",
       "captures": {
        "2": { "name": "entity.name.proc.roy" }
        }
    },
    {  "name": "variable.language.roy",
       "match": "(?i:\\b(_n_|_error_)\\b)"
    },
    {  "name": "comment.block.roy",
       "begin": "(?<!select |SELECT )\\*",
       "end": ";",
       "comment": "This is a kludge, to keep the SQL construct 'select *' from processing as a comment.  I could not figure out how to make the negative lookbehind case-insensitive."
    },
    {  "name": "comment.block.roy",
       "begin": "/\\*",
       "end": "\\*/"
    },
    {  "name": "comment.line.roy",
       "match": "\\*.*;"
    },
    {  "name": "constant.numeric.roy",
       "match": "\\b\\d+\\b"
    },
    {  "name": "constant.date.roy",
       "match": "(?i:['\"]\\d{1,2}(jan|feb|apr|may|jun|jul|aug|sep|oct|nov|dec)\\d{2,4}['\"]d)"
    },
    {  "name": "string.quoted.single.roy",
       "match": "'.+'"
    },
    {  "name": "string.quoted.double.roy",
       "match": "\".+\""
    }
  ],
  "uuid": "7e721b1e-6265-4865-bc4b-308d49affba1"
}

